trigger:
  tags:
    include:
    - v*

pr: none

variables:
- template: common/variables.yml
- group: releaseVariables

stages:
- stage: test
  jobs:
  - job: test
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
    steps:
      - template: common/setup_steps.yml
      - template: common/compile_steps.yml
      - template: common/check_steps.yml
      - template: common/test_steps.yml

- stage: release
  dependsOn: [test]
  jobs:
  - job: release
    pool:
      name: $(BuildAgentPool)
      vmImage: $(BuildAgentImage)
    steps:
      - template: common/setup_steps.yml
      - template: common/compile_steps.yml
      - template: common/check_steps.yml
      - template: common/test_steps.yml
      - template: common/set_release_flags_steps.yml

      # modify package.json for release candidates
      - script: |
          node scripts/modifyPackageJson.js name $(test_extension_name) displayName "$(test_display_name)" aiKey $ENV_AIKEY publisher $(test_publisher)
        displayName: Modify package.json for release candidates
        condition: and(succeeded(), eq(variables['is_rc'], 'true'))
        env:
          ENV_AIKEY: $(TEST_AIKEY)

      # modify package.json for releases
      - script: |
          node scripts/modifyPackageJson.js aiKey $ENV_AIKEY
        displayName: Modify package.json for releases
        condition: and(succeeded(), eq(variables['is_r'], 'true'))
        env:
          ENV_AIKEY: $(PROD_AIKEY)

      - template: common/package_steps.yml

      - task: GitHubRelease@0
        displayName: Deploy Releases or Release Candidates to GitHub Release
        inputs:
          gitHubConnection: $(GithubReleaseConnection)'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          isPreRelease: $(is_rc)
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      # publish vsix to marketplace for releases
      - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: Deploy releases to marketplace
        condition: and(succeeded(), eq(variables['is_r'], 'true'), eq(variables['Agent.OS'], 'Linux'))
        env:
          MARKETPLACE_TOKEN: $(vsciot_marketplace_token)
