# Manual trigger only
trigger: none
pr: none

parameters:
- name: variableGroup
  displayName: 'Pipeline variable group'
  type: string
  default: 'releaseVariables'
- name: buildAgentPoolVar
  displayName: 'Build agent pool'
  type: string
  default: 'BuildAgentPool'
- name: buildAgentVmImageVar
  displayName: 'Build agent image'
  type: string
  default: 'BuildAgentImage'
- name: ghRelease
  displayName: 'Draft github release'
  type: boolean
  default: false
- name: isPreRelease
  displayName: 'PreRelease / release candidate build'
  type: boolean
  default: false
- name: publishExt
  displayName: 'Publish to Marketplace'
  type: boolean
  default: false

variables:
- template: common/variables.yml
- group: ${{ parameters.variableGroup }}
- name: vmImage
  value: $[variables.${{ parameters.buildAgentVmImageVar }}]

stages:
- stage: test
  jobs:
  - job: test
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
    steps:
      - template: common/setup_steps.yml
      - template: common/compile_steps.yml
      - template: common/check_steps.yml
      - template: common/test_steps.yml

- stage: release
  dependsOn: [test]
  pool:
    name: $[variables.${{ parameters.buildAgentPoolVar }}]
    vmImage: $(vmImage)
    demands:
      - ImageOverride -equals $(vmImage)
  jobs:
  - job: CredScan
    displayName: 'Credential Scan'
    steps:
    - task: CredScan@3
      inputs:
        outputFormat: 'pre'
        scanFolder: '$(Build.SourcesDirectory)'

    - task: PostAnalysis@1
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        PoliCheck: false
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        ToolLogsNotFoundAction: 'Standard'

  - job: package_and_release
    displayName: 'Package and Release'
    dependsOn: CredScan
    steps:
      - template: common/setup_steps.yml
      - template: common/compile_steps.yml
      - template: common/check_steps.yml
      - template: common/test_steps.yml

      # modify package.json for release candidates
      - script: |
          node scripts/modifyPackageJson.js name $(test_extension_name) displayName "$(test_display_name)" aiKey $ENV_AIKEY publisher $(test_publisher)
        displayName: Modify package.json for release candidates
        condition: and(succeeded(), eq(${{ parameters.isPreRelease }}, true), eq(${{ parameters.publishExt }}, false))
        env:
          ENV_AIKEY: $(TEST_AIKEY)

      # modify package.json for releases
      - script: |
          node scripts/modifyPackageJson.js aiKey $ENV_AIKEY
        displayName: Modify package.json for releases
        condition: and(succeeded(), eq(${{ parameters.publishExt }}, true), eq(${{ parameters.isPreRelease }}, false))
        env:
          ENV_AIKEY: $(PROD_AIKEY)

      - template: common/package_steps.yml
      
      - task: PowerShell@2
        condition: eq(${{ parameters.ghRelease }}, true)
        displayName: Scrape tag from package.json
        inputs:
          targetType: inline
          script: |
            $packageVersion = npm version | ConvertFrom-Json | Select-Object -ExpandProperty {vscode-dtdl}
            echo "##vso[task.setvariable variable=versionTag]v$packageVersion"
      
      - task: GitHubRelease@1
        displayName: Deploy Releases or Release Candidates to GitHub Release
        inputs:
          gitHubConnection: $(GithubReleaseConnection)
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          tagSource: userSpecifiedTag
          title: Release $(versionTag)
          tag: $(versionTag)
          isDraft: true
          isPreRelease: ${{ parameters.isPreRelease }}
        condition: and(succeeded(), eq(${{ parameters.ghRelease }}, true))

      # publish vsix to marketplace for releases
      - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: Deploy releases to marketplace
        condition: and(succeeded(), eq(${{ parameters.publishExt }}, true), eq(${{ parameters.isPreRelease }}, false))
        env:
          MARKETPLACE_TOKEN: $(vsciot_marketplace_token)
